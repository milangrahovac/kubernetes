1. Upgrade the current version of kubernetes from 1.31.0 to 1.32.0 exactly using the kubeadm utility. 
Make sure that the upgrade is carried out one node at a time starting with the controlplane node. 
To minimize downtime, the deployment gold-nginx should be rescheduled on an alternate node before 
upgrading each node. Upgrade controlplane node first and drain node node01 before upgrading it. 
Pods for gold-nginx should run on the controlplane node subsequently.

Get list of nodes:
kubectl get nodes

check if some nodes have Taint 
kubectl describe node | grep Taints

___________________________________

Switching to another Kubernetes package repository
Open the file that defines the Kubernetes apt repository using a text editor of your choice:

sudo nano /etc/apt/sources.list.d/kubernetes.list

deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /
Change the version in the URL to the next available minor release, for example:

deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /
Save the file and exit your text editor. Continue following the relevant upgrade instructions.

Upgrade the masternode:
- make the master node UnScheduable:
kubectl drain controlplane --ignore-daemonsets 

Upgrade controlplane to v1.20.0
Determine which version to upgrade to:

sudo apt update
sudo apt-cache madison kubeadm

Upgrade kubeadm:
sudo apt-mark unhold kubeadm && \
sudo apt-get update && sudo apt-get install -y kubeadm='1.32.0-*' && \
sudo apt-mark hold kubeadm

Verify that the download works and has the expected version:
kubeadm version

Verify the upgrade plan:
sudo kubeadm upgrade plan

Choose a version to upgrade to
sudo kubeadm upgrade apply v1.32.x

Upgrade kubelet and kubectl 
sudo apt-mark unhold kubelet kubectl && \
sudo apt-get update && sudo apt-get install -y kubelet='1.32.0-1.1' kubectl='1.32.0-1.1' && \
sudo apt-mark hold kubelet kubectl

Restart the kubelet:
sudo systemctl daemon-reload
sudo systemctl restart kubelet

Check status:
kubectl get nodes

Uncordon the node
kubectl uncordon controlplane

_____________
Drain worker node01 
kubectl drain node01 --ignore-daemonsets 

ssh node01

Upgrade kubeadm:
sudo apt-mark unhold kubelet kubectl && \
sudo apt-get update && sudo apt-get install -y kubelet='1.32.x-*' kubectl='1.32.0-1.1' && \
sudo apt-mark hold kubelet kubectl

Call "kubeadm upgrade
sudo kubeadm upgrade node

Upgrade kubelet and kubectl 
sudo apt-mark unhold kubelet kubectl && \
sudo apt-get update && sudo apt-get install -y kubelet='1.32.0-1.1' kubectl='1.32.0-1.1â€™ && \
sudo apt-mark hold kubelet kubectl

Restart the kubelet:
sudo systemctl daemon-reload
sudo systemctl restart kubelet

Uncordon the node
kubectl uncordon node01

_____________
kubectl-controller-manager --pod-eviction-timeout=5m0s
kubectl drain node-1 (move podes from node-1 to another pods, scheduler do not create pods on that node)
kubectl drain node01 --ignore-daemonsets

kubectl cordon node-1 (make node unschedulable, active pods stays runing on the pod)
kubectl uncordon node-1 (make node schedulable)

apt list -a kubeadm

google cloud update cluster
kubeadm upgrade plan
kubeadm upgrade apply v1.31.6
apt-get upgrade -y kubeadm=1.12.0-00
kubeadm upgrade apply v1.12.0
system restart kubelet services



1. kubectl drain node-1
2. apt-get upgrade -y kubeadm=1.12.0-00
3. apt-get upgrade -y kubelet=1.12.0-00
4. kubeadm upgrade node config --kubelet-version v1.12.0
5. system restart kubelet services
6. kubectl uncordon node-1



kubeadm upgrade node config --kubelet-version v1.31.0 \
system restart kubelet services


2. Print the names of all deployments in the admin2406 namespace in the following format:

DEPLOYMENT   CONTAINER_IMAGE   READY_REPLICAS   NAMESPACE

<deployment name>   <container image used>   <ready replica count>   <Namespace>
. The data should be sorted by the increasing order of the deployment name.


Example:

DEPLOYMENT   CONTAINER_IMAGE   READY_REPLICAS   NAMESPACE
deploy0   nginx:alpine   1   admin2406
Write the result to the file /opt/admin2406_data.

3. A kubeconfig file called admin.kubeconfig has been created in /root/CKA. There is something wrong with the configuration. Troubleshoot and fix it.

4. Create a new deployment called nginx-deploy, with image nginx:1.16 and 1 replica.
Next, upgrade the deployment to version 1.17 using rolling update and add the annotation message
Updated nginx image to 1.17.

5. A new deployment called alpha-mysql has been deployed in the alpha namespace. However, the pods are not running. Troubleshoot and fix the issue. The deployment should make use of the persistent volume alpha-pv to be mounted at /var/lib/mysql and should use the environment variable MYSQL_ALLOW_EMPTY_PASSWORD=1 to make use of an empty root password.

6. Take the backup of ETCD at the location /opt/etcd-backup.db on the controlplane node.

7. Create a pod called secret-1401 in the admin1401 namespace using the busybox image. The container within the pod should be called secret-admin and should sleep for 4800 seconds.

The container should mount a read-only secret volume called secret-volume at the path /etc/secret-volume. The secret being mounted has already been created for you and is called dotfile-secret.


