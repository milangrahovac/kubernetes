1. Install the kubeadm and kubelet packages on the controlplane and node01 nodes.

Installing a container runtime 
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.ipv4.ip_forward = 1
EOF

sudo sysctl --system

check os verision
cat /etc/*-release


sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list



sudo apt-get update
# sudo apt-get install -y kubelet kubeadm kubectl
sudo apt install -y kubeadm=1.31.0-1.1 kubelet=1.31.0-1.1 kubectl=1.31.0-1.1
sudo apt-mark hold kubelet kubeadm kubectl

2. What is the version of kubelet installed?
kubelet --version

3. How many nodes are part of kubernetes cluster currently?
kubectl get nodes 
answer 0

4. Lets now bootstrap a kubernetes cluster using kubeadm.

5. Initialize Control Plane Node (Master Node). Use the following options:

apiserver-advertise-address - Use the IP address allocated to eth0 on the controlplane node
apiserver-cert-extra-sans - Set it to controlplane
pod-network-cidr - Set to 10.244.0.0/16

Once done, set up the default kubeconfig file and wait for node to be part of the cluster.


run ip add 
find ip of the eth0
192.10.152.9/24

kubeadm init --apiserver-advertise-address=192.10.152.9 --pod-network-cidr=10.244.0.0/16

To start using your cluster, you need to run the following as a regular user:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


 kubectl get nodes -- and node is running

6. Generate a kubeadm join token
Or copy the one that was generated by kubeadm init command
copy from the cube init cmd (task 6)

run in node01: 

kubeadm join 192.10.152.9:6443 --token j8kpv6.9jgwcvg4rsjy4byt \
        --discovery-token-ca-cert-hash sha256:8e7536ded9266f1f76f6a7263898fb7fa8a7c9df6589bc0c7cc1b652cfed56e7 

7. Join node01 to the cluster using the join token

run in node01: 

kubeadm join 192.10.152.9:6443 --token j8kpv6.9jgwcvg4rsjy4byt \
        --discovery-token-ca-cert-hash sha256:8e7536ded9266f1f76f6a7263898fb7fa8a7c9df6589bc0c7cc1b652cfed56e7 


8. To install a network plugin, we will go with Flannel as the default choice. 
For inter-host communication, we will utilize the eth0 interface.
Please ensure that the Flannel manifest includes the appropriate options for this configuration.
Refer to the official documentation for the procedure.

wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml


add flag: --iface=eth0

containers:
  - name: kube-flannel
    image: quay.io/coreos/flannel:v0.10.0-amd64
    command:
      - /opt/bin/flanneld
    args:
      - --ip-masq
      - --kube-subnet-mgr
      - --iface=eth0

kubectl apply -f kube-flannel.yml 

kubectl get pods -A