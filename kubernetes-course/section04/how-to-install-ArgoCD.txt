Running ArgoCD locally on macOS requires setting up a Kubernetes cluster on your machine (e.g., using Minikube or Kind) and deploying ArgoCD into that cluster. Here's a step-by-step guide to achieve this:

1. Install Required Tools
First, ensure you have the following tools installed:

Homebrew (package manager for macOS):

/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
kubectl (Kubernetes CLI):


brew install kubectl
Minikube (local Kubernetes cluster):

brew install minikube
ArgoCD CLI (optional, for managing ArgoCD via CLI):
brew install argocd

2. Start a Local Kubernetes Cluster
Use Minikube to set up a Kubernetes cluster:

minikube start --cpus=4 --memory=8192
This starts a cluster with 4 CPUs and 8GB of memory. Adjust resources based on your system.

3. Install ArgoCD in the Cluster
ArgoCD is installed via Kubernetes manifests. Apply the official installation YAML:

kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

4. Expose ArgoCD UI Locally
By default, the ArgoCD server runs as a Kubernetes service in the cluster. To access it locally, expose the service using port-forwarding:

kubectl port-forward svc/argocd-server -n argocd 8080:443
This maps the ArgoCD UI to https://localhost:8080.

5. Log into ArgoCD
Retrieve the initial admin password:

kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d
Log in to the ArgoCD UI via https://localhost:8080 using:

Username: admin
Password: (from the previous command).
Alternatively, you can log in using the CLI:

argocd login localhost:8080 --username admin --password <password> --insecure
6. Create Applications
You can now create and manage applications in ArgoCD. Use the UI or CLI to define GitOps repositories and deploy your apps.

