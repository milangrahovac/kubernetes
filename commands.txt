minikube start/stop
minikube dashboard

kubectl config view

kubectl get pods -n kube-system
NAME                               READY   STATUS    RESTARTS         AGE
coredns-5dd5756b68-9pmh6           1/1     Running   13 (194d ago)    221d
etcd-minikube                      1/1     Running   12 (194d ago)    221d
kube-apiserver-minikube            1/1     Running   12 (14m ago)     221d
kube-controller-manager-minikube   1/1     Running   12 (194d ago)    221d
kube-proxy-rn97l                   1/1     Running   12 (194d ago)    221d
kube-scheduler-minikube            1/1     Running   12 (194d ago)    221d
storage-provisioner                1/1     Running   28 (2m44s ago)   221d

For example ETCDCTL version 2 supports the following commands:
		etcdctl backup
		etcdctl cluster-health
		etcdctl mk
		etcdctl mkdir
		etcdctl set

Whereas the commands are different in version 3
		etcdctl snapshot save
		etcdctl endpoint health
		etcdctl get
		etcdctl put

Certificates:
		--cacert /etc/kubernetes/pki/etcd/ca.crt
		--cert /etc/kubernetes/pki/etcd/server.crt
		--key /etc/kubernetes/pki/etcd/server.key


kubectl run nginx --image nginx
kubectl get pods
kubectl get pods -o wide
kubectl get pods --selector app=app1
kubectl get pod webapp -o yaml > my-new-pod.yaml



kubectl create -f pod-definition.yml
kubectl delete -f pod-definition.yml
kubectl describe pod myapp-pod

kubectl run redis --image=redis --dry-run -0 yaml
kubectl run redis --image=redis --dry-run -0 yaml > redis.yaml

kubectl edit pod <pod-name>
kubectl replace -f replicaset-definition.yml
kubectl replace --force -f replicaset-definition.yml


kubectl get replicationcontroller
kubectl scale replicaset <replicaset-name> --replicas=<new-count>
kubectl slale --replicas=6 -f replicaset-definition.yml
kubectl slale --replicas=6 -f replicaset myapp-replicaset

kubectl create -f replicaset-definition.yml
kubectl get replicaset
kubectl delete  -f replicaset-definition.yml
kubectl delete  replicaset myapp-replicaset

kubectl replace -f replicaset-definition.yml


kubectl logs pod-name

get interactive terminal
kubectl exec-it podname --bin/bash

Create an NGINX Pod
kubectl run nginx --image=nginx

Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
kubectl run nginx --image=nginx --dry-run=client -o yaml

Create a deployment
kubectl create deployment --image=nginx nginx

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run) and save it to a file.
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml

Make necessary changes to the file (for example, adding more replicas) and then create the deployment.
kubectl create -f nginx-deployment.yaml

c

OR

In k8s version 1.19+, we can specify the --replicas option to create a deployment with 4 replicas.
kubectl create deployment --image=nginx nginx --replicas=4 --dry-run=client -o yaml > nginx-deployment.yaml


kubectl create deployment --image=httpd:2.4-alpine httpd-frontend --replicas=3 --dry-run=client -o yaml > deployment-definition-2.yaml



kubectl get pods -n kube-system
kubectl get endpoints <service name>   
kubectl get pods --namespace=kube-system
kubectl create -f pode-definition.yml --namespace=dev

kubectl create namespace dev
kubectl config set-context $(kubectl config current-context) --namespace=dev
kubectl get pods --all-namespaces


kubectl run redis --image=redis:alpine --dry-run=client -o yaml > redis-pod.yaml
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml

kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3 --dry-run=client -o yam

kubectl run custom-nginx --image=nginx --dry-run=client
kubectl expose pod custom-nginx --port=8080 --name nginx-service --dry-run=client -o yaml
kubectl run custom-nginx --image=nginx --port=8080
kubectl create namespace dev-ns


kubectl create deployment redis-deploy --image=redis --replicas=2 -n=dev-ns --dry-run=client -o yaml


kubectl run httpd --image=httpd:alpine --port=8080
kubectl expose pod httpd --port=80 --name httpd --dry-run=client -o yaml

Taint:
kubect taint nodes node-name key=value:taint-effect
kubectl taint nodes node1 app=blue:NoSchedule

Telerations:
	spec:
		tolerations:
			- key: app
			operator: "Equal"
			value: blue
			effect: NoSchedule


kubectl describe node kubemaster | grep Taint


kubectl label nodes node-name label-key=label-value
kubectl label nodes node01 size=Large 
kubectl label nodes node01 color=blue



1. kubectl run nginx-pod --image=nginx:alpine  

2. kubectl run redis --image=redis:alpine --label="tier=db, env=prod"

3. kubectl expose pod redis --port=6379 --name redis-service  

4. kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3

5. kubectl run custom-nginx --image=nginx --port=8080

6. kubectl create namespace dev-ns

7. kubectl create deployment redis-deploy --image=redis --replicas=2 -n=dev-ns

8. kubectl run httpd --image=httpd:alpine --port=80 --expose=true


labels and selectors

1. kubectl get pods --selector env=dev
2. kubectl get pods --selector bu=finance
3. kubectl get all --selector env=prod --no-headers | wc -l
4. kubectl get pods --selector "env=prod,bu=finance,tier=frontend"
5. kubectl apply -f replicaset-definition-1.yaml


1. kubectl get pods --selector env=dev | wc -l
1. kubectl get pods --selector env=dev --no-headers | wc -l


taints
2. kubectl describe node node01 | grep Taint
3. kubectl taint nodes node01 spray=mortein:NoSchedule
4. kubectl run mosquito --image=nginx
7. kubectl run bee --image=nginx
8. kubectl taint nodes controlplane node-role.kubernetes.io/control-plane:NoSchedule-


kubectl create deployment red --image=nginx --replicas=3 --dry-run=client -o yaml > blue.yaml

kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3 --dry-run=client -o yam
